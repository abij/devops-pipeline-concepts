# Example Azure DevOps pipeline with multiple examples embedded.

# The key concepts are explained here: https://learn.microsoft.com/azure/devops/pipelines/get-started/key-pipelines-concepts

# Using the default filename 'azure-pipelines.yml' will auto-register the pipeline in Azure DevOps.
# If you want to use a different filename, you will need to register the pipeline manually.

# When to run the pipeline.
trigger: 
- main

# Inputs from the UI, note parameters have types.
parameters:
- name: p1string
  displayName: String parameter
  type: string
  default: 'some value'
- name: p2bool
  displayName: Boolean parameter
  type: boolean
  default: true
- name: p3int
  displayName: Integer parameter
  type: number
  default: 42

# Set the default pool for all stages and jobs
pool:
  # Use MS-hosted agents: https://learn.microsoft.com/azure/devops/pipelines/agents/hosted  
  # Installed Software: https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
  vmImage: 'ubuntu-latest'  # other example: 'windows-latest'


variables:
- group: lookup-variables  # https://docs.microsoft.com/azure/devops/pipelines/library/variable-groups
- name: static-variable
  value: 'static value'
- name: runtime-variable
  value: $[variables['var1-in-group']] # from variable group
- name: compile-variable
  ${{ if parameters.p2bool }}: 
    value: 'value-1'
  ${{ else }}:
    value: 'value-2'
- name: test-overwrite
  value: 'top level'

stages:
- stage: s1
  displayName: Variables

  variables:
  - name: test-overwrite
    value: 'stage level'

  jobs:
  - job: j1
    displayName: Predefined Variables
    # https://learn.microsoft.com/azure/devops/pipelines/build/variables
    steps:
    - checkout: none  # skip checkout
    - script: |
        echo "Pipeline.Workspace: $(Pipeline.Workspace) (same as Agent.BuildDirectory)"
        echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
        echo "Agent.OS: $(Agent.OS)"
        echo "AGENT_JOBSTATUS: $AGENT_JOBSTATUS"
        echo "Agent.TempDirectory: $(Agent.TempDirectory) (cleaned after each job)"
      displayName: Agent variables
    
    - script: |
        echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
        echo "Build.BuildId: $(Build.BuildId)"
        echo "Build.Reason: $(Build.Reason)"
        echo "Build.SourceBranch: $(Build.SourceBranch)"
        echo "Build.SourceBranchName: $(Build.SourceBranchName)"
        echo "Note: a branch /feature/sneaky/main is also called main!"
      displayName: Build variables (not in template)

    - template: templates/steps-print-build-variables.yml
  
  - job: j2
    displayName: User-defined variables
    
    variables:
    - name: test-overwrite
      value: 'j2 level'

    steps:
    - checkout: none  # skip checkout
    - script: |
        echo "User-defined variables:"
        echo "  static-variable: $(static-variable)"
        echo "  runtime-variable (from the group): $(runtime-variable)"
        echo "  compile-variable: $(compile-variable)"
        echo "  test-overwrite: $(test-overwrite)"
      displayName: User-defined variables

  - job: j3
    displayName: Set variables (j3)
    steps:
    - checkout: none  # skip checkout
    - script: |
        # Note: taks 'name' is required for referencing output variables in other jobs!.

        echo "##vso[task.setvariable variable=var1_no_output]this is usable ONLY in this Job!"
        echo "##vso[task.setvariable variable=var2_is_output;isOutput=true]This can by used in all jobs that dependsOn this stage!"
        echo "##vso[task.setvariable variable=var3_no_output_is_secret;iSsecret=true]this is never shown in the logs!"
        echo "##vso[task.setvariable variable=var4_no_output_is_readonly;isreadonly=true]this value is immutable."
        
        # After this task the variables are available:
        echo "$(var1_no_output)" # no output.
      name: task_vars
      displayName: Set variables

    - script: echo "##vso[task.setvariable variable=var4_no_output_is_readonly;isreadonly=true]or was it mutalbe?."
      displayName: Try to update readonly
      failOnStderr: false
      continueOnError: true

    - script: |
        echo "How to reference variables:"
        echo "  var1: $(var1_no_output)"
        echo "  var2: $(var2_is_output)            (incorrect: because incorrect reference)"
        echo "  var2: $(task_vars.var2_is_output)  (correct: including task.name, required because isOutput=true)"
        echo "  var3: $(var3_no_output_is_secret)"
        echo "  var4: $(var4_no_output_is_readonly)"
      displayName: Show vars (same job)

  - job: j4
    displayName: Get Variabled (dependsOn j3)
    dependsOn: j3   # dependsOn is required to get output variables from other jobs.

    variables:
      - name: var1_no_output  # note: isOutput=false, therefor this is an empty variable.
        value: $[ dependencies.j3.outputs['task_vars.var1_no_output'] ]
      - name: var2_is_output
        value: $[ dependencies.j3.outputs['task_vars.var2_is_output'] ]

    steps:
      - checkout: none  # skip checkout
      - script: |
          echo "  var1_no_output: $(var1_no_output)  (empty because isOutput=false)"
          echo "  var2_is_output: $(var2_is_output)"
        displayName: Show vars (future job)

- stage: s1b
  displayName: Get Variables
  dependsOn: s1

  variables:
    var2: $[stageDependencies.s1.j3.outputs['task_vars.var2_is_output']]

  jobs:
  - job: j1
    displayName: Get Variables
    steps:
      - checkout: none  # skip checkout
      - script: |
          echo "  var2: $(var2)"
        displayName: Show vars (future stage)

- stage: s2
  displayName: Job-types
  jobs:
  - job: j1
    displayName: Type-Job
    steps:
    # Jobs checkout source-code of the selected branch by default.
    # Jobs do not download pipline artifacts by default.
    
    # Note: restarting a job will point to the same commit in the branch!
    - script: echo 'Jobs checkout code' && ls -lr .
      displayName: 'Run a one-line script'

  - deployment: d2
    displayName: Type-Deployment
    
    # Type: Deployment is tighly coupled to an environment, defined as a string.
    # Although it a string, but is linked to a Pipeline Environment.
    # Configure the enviroment to:
    # - Approvals: Single or multiple groups/individuals who all must approve. (no order, nr of people)
    # - Branch Control: Limit access to specific branches (e.g. only from main/release) optionally check for Branch Policy.
    # - Exclusive Lock: block concurrent Stages in any other pipeline with a deployment to the same environment.
    # - Business Hours: Limit access within specified timeframe.
    environment: 'example-env1'
    strategy:
      runOnce:
        deploy:
          steps:
          # Deployments do NOT checkout code.
          # Deployments download (all) pipeline artirifacts by default.
          - script: echo 'Deploying...'
          - script: echo 'Deployed!'

# In this stage we use a server pool, which is a pool of agents that are not hosted by Microsoft.
# Some tasks require the pool: server, more info 
# https://learn.microsoft.com/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#agentless-tasks
- stage: s3
  displayName: Agentless

  pool: server 

  jobs:
  - job: j1
    displayName: No agent tasks
    steps:
    - task: Delay@1
      displayName: 'Delay 1 minute'
      inputs:
        delayForMinutes: '1'
    
    - task: ManualValidation@0
      timeoutInMinutes: 1
      inputs:
        notifyUsers: '' # [orgname]\group name
        instructions: 'This text describes actions for users, to decide: resume or reject, not this is NOT safe-guard. Because enyone can approve. For a blocking-approval you must use an Environment with approvals & checks!'
        onTimeout: 'resume' # Default: reject.

- stage: s4
  displayName: Git
  jobs:
  - job: j1
    displayName: Git tasks
    steps:
    - checkout: self
      persistCredentials: true  # allow push 
    
    - script: sed -Ei 's/(Auto-update by pipeline:).*/\1 last runid $(Build.BuildId)/g' README.md
      displayName: Update README

    - script: |
        # Auto update readme
        sed -Ei 's/(Auto-update by pipeline:).*/\1 last runid $(Build.BuildId)/g' README.md

        git checkout $(Build.SourceBranch)
        git config --global user.email ""
        git config --global user.name "Azure DevOps"
        git add README.md
        git commit -m "DevOps: update readme [skip ci]"
        git push
      displayName: 'Git commit and push'