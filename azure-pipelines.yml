# Example Azure DevOps pipeline with multiple examples embedded.

# The key concepts are explained here: https://learn.microsoft.com/azure/devops/pipelines/get-started/key-pipelines-concepts

# Using the default filename 'azure-pipelines.yml' will auto-register the pipeline in Azure DevOps.
# If you want to use a different filename, you will need to register the pipeline manually.

# When to run the pipeline.
trigger: 
- main

# Inputs from the UI, note parameters have types.
parameters:
  - name: p1string
    displayName: String parameter
    type: string
    default: 'some value'
  - name: p2bool
    displayName: Boolean parameter
    type: boolean
    default: true
  - name: p3int
    displayName: Integer parameter
    type: number
    default: 42

# Set the default pool for all stages and jobs
pool:
  # Use MS-hosted agents: https://learn.microsoft.com/azure/devops/pipelines/agents/hosted  
  # Installed Software: https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
  vmImage: 'ubuntu-latest'  # other example: 'windows-latest'


variables:
  - group: lookup-variables  # https://docs.microsoft.com/azure/devops/pipelines/library/variable-groups
  - name: static-variable
    value: 'static value'
  - name: runtime-variable
    value: $[variables['var1-in-group']] # from variable group
  - name: compile-variable
    ${{ if parameters.p2bool }}: 
      value: 'value-1'
    ${{ else }}:
      value: 'value-2'
  - name: test-overwrite
    value: 'top level'

stages:
- stage: s1
  displayName: Variables

  variables:
    - name: test-overwrite
      value: 'stage level'

  jobs:
  - job: j1
    displayName: Predefined Variables
    # https://learn.microsoft.com/azure/devops/pipelines/build/variables
    steps:
      - script: |
          echo "Pipeline.Workspace: $(Pipeline.Workspace) (same as Agent.BuildDirectory)"
          echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
          echo "Agent.OS: $(Agent.OS)"
          echo "AGENT_JOBSTATUS: $AGENT_JOBSTATUS"
          echo "Agent.TempDirectory: $(Agent.TempDirectory) (cleaned after each job)"
        displayName: Agent variables
      
      - script: |
          echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          echo "Build.BuildId: $(Build.BuildId)"
          echo "Build.Reason: $(Build.Reason)"
          echo "Build.SourceBranch: $(Build.SourceBranch)"
          echo "Build.SourceBranchName: $(Build.SourceBranchName)"
        displayName: Build variables (not in template)

      - template: templates/steps-print-build-variables.yml
  
  - job: j2
    displayName: User-defined variables
    
    variables:
    - name: test-overwrite
      value: 'j2 level'

    steps:
      - script: |
          echo "User-defined variables:"
          echo "  $(static-variable)"
          echo "  $(runtime-variable)"
          echo "  $(compile-variable)"
          echo "  $(test-overwrite)"
        displayName: User-defined variables



- stage: s2
  displayName: Job-types
  jobs:
  - job: j1
    displayName: Type-Job
    steps:
      # Jobs checkout source-code of the selected branch by default.
      # Jobs do not download pipline artifacts by default.
      
      # Note: restarting a job will point to the same commit in the branch!
      - script: echo 'Jobs checkout code' && ls -lr .
        displayName: 'Run a one-line script'

  - deployment: d2
    displayName: Type-Deployment
    
    # Type: Deployment is tighly coupled to an environment, defined as a string.
    # Although it a string, but is linked to a Pipeline Environment.
    # Configure the enviroment to:
    # - Approvals: Single or multiple groups/individuals who all must approve. (no order, nr of people)
    # - Branch Control: Limit access to specific branches (e.g. only from main/release) optionally check for Branch Policy.
    # - Exclusive Lock: block concurrent Stages in any other pipeline with a deployment to the same environment.
    # - Business Hours: Limit access within specified timeframe.
    environment: 'example-env1'
    strategy:
      runOnce:
        deploy:
          steps:
          # Deployments do NOT checkout code.
          # Deployments download 
          - script: echo 'Deploying...'
          - script: echo 'Deployed!'

- stage: s3
  displayName: Agentless

    # https://learn.microsoft.com/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#agentless-tasks
  pool: server 

  jobs:
  - job: j1
    displayName: No Agent
    steps:
    - task: Delay@1
      displayName: 'Delay 1 minute'
      inputs:
        delayForMinutes: '1'
    
    - task: ManualValidation@0
      inputs:
        notifyUsers: '' # [orgname]\group name
        instructions: 'This text describes actions for users, to decide: resume or reject, not this is NOT safe-guard. Because enyone can approve!'
        onTimeout: 'resume' # Default: reject.
        timeoutInMinutes: 1

- stage: s4
  displayName: Git
  jobs:
  - job: j1
    displayName: Git tasks
    steps:
    - checkout: self
      persistCredentials: true  # allow push 
    
    - script: sed -Ei 's/(Auto-update by pipeline:).*/\1 last runid $(Build.BuildId)/g' README.md
      displayName: Update README

    - script: |
        # Auto update readme
        sed -Ei 's/(Auto-update by pipeline:).*/\1 last runid $(Build.BuildId)/g' README.md

        git checkout $(Build.SourceBranch)
        git config --global user.email ""
        git config --global user.name "Azure DevOps"
        git add README.md
        git commit -m "DevOps: update readme [skip ci]"
        git push
      displayName: 'Git commit and push'