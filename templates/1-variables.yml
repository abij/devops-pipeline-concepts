
parameters:
  - name: boolVar
    type: boolean
    default: true

stages:
- stage: s1
  displayName: Variables (s1)

  variables:
  - name: staticVar
    value: 'static value'
  - name: compileVar
  ${{ if eq(parameters.boolVar, true) }}: 
    value: 'value-true'
  ${{ else }}: 
    value: 'value-false'
  - name: runtimeVar
    value: $[variables['var1-in-group']] # from variable group
  - name: isMain # also runtime variable
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: test-overwrite
    value: 'stage level'

  jobs:
  - job: j1
    displayName: Predefined Variables
    # https://learn.microsoft.com/azure/devops/pipelines/build/variables
    steps:
    - checkout: none  # skip checkout
    
    - script: |
        echo "Default location: $(pwd)"
        echo "Current environment variables:"
        env | sort
      displayName: Environment variables
      env:
        SOME_EXTRA_VAR: 'some extra value'

    - script: |
        echo "Pipeline.Workspace: $(Pipeline.Workspace) (same as Agent.BuildDirectory)"
        echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
        echo "Agent.OS: $(Agent.OS)"
        echo "AGENT_JOBSTATUS: $AGENT_JOBSTATUS"
        echo "Agent.TempDirectory: $(Agent.TempDirectory) (cleaned after each job)"
      displayName: Agent variables
    
    - script: |
        echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
        echo "Build.BuildId: $(Build.BuildId)"
        echo "Build.Reason: $(Build.Reason)"
        echo "Build.SourceBranch: $(Build.SourceBranch)"
        echo "Build.SourceBranchName: $(Build.SourceBranchName)"
        echo "Note: a branch /feature/sneaky/main is also called main!"
      displayName: Build variables

  
  - job: j2
    displayName: User-defined variables
    
    variables:
    - name: test-overwrite
      value: 'j2 level'

    steps:
    - checkout: none  # skip checkout
    - script: |
        echo "User-defined variables:"
        echo "  staticVar: $(staticVar)"
        echo "  runtimeVar (from the group): $(runtimeVar)"
        echo "  compileVar: $(compileVar)"
        echo "  test-overwrite: $(test-overwrite)"
      displayName: User-defined variables

  - job: j3
    displayName: Set variables (j3)
    steps:
    - checkout: none  # skip checkout
    - script: |
        # Note: task 'name' is required for referencing output variables in other jobs!.

        echo "##vso[task.setvariable variable=var1_no_output]this is usable ONLY in this Job!"
        echo "##vso[task.setvariable variable=var2_is_output;isOutput=true]This can by used in all jobs that dependsOn this stage!"
        echo "##vso[task.setvariable variable=var3_no_output_is_secret;iSsecret=true]this is never shown in the logs!"
        echo "##vso[task.setvariable variable=var4_no_output_is_readonly;isreadonly=true]this value is immutable."
        
        # After this task the variables are available:
        echo "$(var1_no_output)" # this line will silently fail.
      name: task_vars
      displayName: Set variables

    - script: echo "##vso[task.setvariable variable=var4_no_output_is_readonly]or was it mutable?."
      displayName: Try to update readonly
      failOnStderr: false
      continueOnError: true
    
    - task: PythonScript@0
      displayName: Python variable
      inputs:
        scriptSource: 'inline'
        script: |
          print('Output variables can be created inside Pyhton code:')
          print('##vso[task.setvariable variable=var5_python]Created inside Python')

    - script: |
        echo "How to reference variables:"
        echo "  var1: $(var1_no_output)"
        echo "  var2: $(var2_is_output)            (incorrect: because incorrect reference)"
        echo "  var2: $(task_vars.var2_is_output)  (correct: including task.name, required because isOutput=true)"
        echo "  var3: $(var3_no_output_is_secret)"
        echo "  var4: $(var4_no_output_is_readonly)"
        echo "  var5: $(var5_python)"
      displayName: Show vars (same job)


  - deployment: d1
    displayName: Set variables (d1)
    environment: 'example-env1'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "##vso[task.setvariable variable=var6;isOutput=true]Created inside a type-Deployment"
              echo "Created output variable 'var6' in a deployment, this is referenced differently!"
            name: task_vars
            displayName: Set variable (deployment)

  - job: j4
    displayName: Get Variabled (dependsOn j3)
    dependsOn: j3   # dependsOn is required to get output variables from other jobs.

    variables:
      - name: var1_no_output  # note: isOutput=false, therefor this is an empty variable.
        value: $[ dependencies.j3.outputs['task_vars.var1_no_output'] ]
      - name: var2_is_output
        value: $[ dependencies.j3.outputs['task_vars.var2_is_output'] ]
      - name: var6
        value: $[ dependencies.d1.outputs['task_vars.var6'] ]

    steps:
    - checkout: none  # skip checkout
    - script: |
        echo "  var1_no_output: $(var1_no_output)  (empty because isOutput=false)"
        echo "  var2_is_output: $(var2_is_output)"
        echo "  var6: $(var2_is_output)   (from deployment)"
      displayName: Show vars (future job)

- stage: s1b
  displayName: Get Variables (s1b)
  dependsOn: s1

  variables:
    # For jobs: stageDependencies.[STAGE].[JOB].outputs['[TASK].[VAR]']
    job_variable: $[stageDependencies.s1.j3.outputs['task_vars.var2_is_output']]
    # Note: deployment reference repeat the name (d1)!
    #   stageDependencies.[STAGE].[DEPLOYMENT].outputs['[DEPLOYMENT].[TASK].[VAR]']
    deployment_var: $[stageDependencies.s1.d1.outputs['d1.task_vars.var6']]

  jobs:
  - job: j1
    displayName: Get Variables (s1.j3)
    steps:
      - checkout: none  # skip checkout
      - script: |
          echo "job_variable: $(job_variable)"
          echo "deployment_var: $(deployment_var)"
        displayName: Show vars (future stage)